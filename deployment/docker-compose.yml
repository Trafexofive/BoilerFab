services:
  # Traefik Reverse Proxy - The Gateway
  traefik:
    image: traefik:v3.0
    container_name: boilerfab-traefik
    command:
      - "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.traefik.address=:8080"
      - "--ping=true"
    ports:
      - "8090:80"     # Use different port when NPM is on :80
      - "8080:8080"   # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - boilerfab-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik-dashboard.rule=Host(`traefik.localhost`) || PathPrefix(`/traefik`)"
      - "traefik.http.services.traefik-dashboard.loadbalancer.server.port=8080"
      - "com.docker.compose.project=boilerfab"

  # BoilerFab Core Service
  boilerfab-service:
    build:
      context: ../
      dockerfile: build/Dockerfile
    image: boilerfab:latest
    container_name: boilerfab-service
    restart: unless-stopped
    
    # Environment configuration
    environment:
      - SERVICE_NAME=BoilerFab Template Service
      - SERVICE_HOST=0.0.0.0
      - SERVICE_PORT=8000
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DEBUG_MODE=${DEBUG_MODE:-false}
      - TEMPLATES_DIR=/app/templates
    
    # Volumes - organized paths
    volumes:
      - ../services:/app/services
      - ../templates:/app/templates:rw
      - ../config/settings.yaml:/app/settings.yaml:ro
      - ../runtime/api_config.json:/app/api_config.json:rw
      - ../runtime/logs:/app/logs:rw
      - ../runtime/backups:/app/backups:rw
    
    # Disable health check for now - focus on routing
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:8000/"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 10s
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    
    # Networks
    networks:
      - boilerfab-net
    
    # Traefik Labels  
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.boilerfab.rule=PathPrefix(`/`)"
      - "traefik.http.routers.boilerfab.entrypoints=web"
      - "traefik.http.services.boilerfab.loadbalancer.server.port=8000"
      - "com.docker.compose.project=boilerfab"
      - "service.name=boilerfab-service"
      - "service.type=api"

  # Optional services (use profiles to enable)
  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD:-boilerfab-redis}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - boilerfab-net
    profiles:
      - caching
    labels:
      - "com.docker.compose.project=boilerfab"

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=boilerfab
      - POSTGRES_USER=boilerfab
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-boilerfab-db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - boilerfab-net
    profiles:
      - database
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U boilerfab"]
      interval: 10s
      timeout: 5s
      retries: 5
    labels:
      - "com.docker.compose.project=boilerfab"

volumes:
  redis_data:
    labels:
      - "com.docker.compose.project=boilerfab"
  postgres_data:
    labels:
      - "com.docker.compose.project=boilerfab"

networks:
  boilerfab-net:
    driver: bridge
    name: boilerfab-network
    labels:
      - "com.docker.compose.project=boilerfab"